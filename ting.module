<?php
/**
 * @file
 * Enables integration with Ting.
 */

// Define the different types of data that we cache in ting_set_cache and the
// default TTL.
define('TING_DEFAULT_CACHE_LIFETIME', 900);
define('TING_CACHE_TING_OBJECT', 'ting-object');
define('TING_CACHE_TING_OBJECT_FULLTEXT', 'ting-object-fulltext');
define('TING_CACHE_COLLECTION', 'ting-collection');
define('TING_CACHE_REPLY', 'ting-reply');

// Load Field module hooks.
module_load_include('inc', 'ting', 'ting.field');

/**
 * Implements hook_menu().
 */
function ting_menu() {
  $items = array();

  $items['admin/config/ting'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ting/settings'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ding_install_tasks().
 * @todo
 * Perhaps move to a hook_install_task().
 */
// function ting_ding_install_tasks() {
//   module_load_include('inc', 'ting', 'ting.admin');
//   return array(
//     'ting_admin_ting_settings' => array(
//       'display_name' => st('Ting service settings'),
//       'type' => 'form',
//       'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
//     ),
//   );
// }

/**
 * Implements hook_permission().
 */
function ting_permission() {
  return array(
    'administer ting settings' => array(
      'title' => t('Administer ting settings'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Ensures that all expired entries are delete form the cache on cron runes.
 */
function ting_cron() {
  cache_clear_all(NULL, 'cache_ting');
}

/**
 * Implements hook_flush_caches().
 */
function ting_flush_caches() {
  return array('cache_ting');
}

/**
 * Get relations for an ting_entity as an array ([$type] => array($relations)).
 */
function ting_get_relations($ting_entity) {
  $relations = array();

  foreach ($ting_entity->relations as $relation) {
    if ($relation->type == 'dbcaddi:hasOpenUrl' || $relation->type == 'dbcaddi:hasOnlineAccess') {
      continue;
    }
    $relations[$relation->type][] = $relation;
  }

  // Get references from ting_reference.
  if (module_exists('ting_reference')) {
    $refs = module_invoke('ting_reference', 'get_relations', 'ting_object', $ting_entity);
    if (!empty($refs)) {
      foreach ($refs as $ref) {
        $relations[$ref->relation_type][] = $ref;
      }
    }
  }
  return $relations;
}

/**
 * Implements hook_entity_info().
 */
function ting_entity_info() {
  $return = array(
    'ting_object' => array(
      'label' => t('Ting object'),
      'controller class' => 'TingObjectController',
      'base table' => 'ting_object',
      'revision table' => 'ting_object_revision',
      'uri callback' => 'ting_object_uri',
      'ding_entity_type' => 'ding_entity',
      'ding_entity_menu' => 'ting/object/%ting_object',
      'ding_entity_index' => 2,
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'tid',
        'revision' => 'vid',
      ),
      'view modes' => array(),
      'bundles' => array(),
    ),

    'ting_collection' => array(
      'label' => t('Ting collection'),
      'controller class' => 'TingCollectionController',
      'base table' => 'ting_object',
      'uri callback' => 'ting_collection_uri',
      'ding_entity_type' => 'ding_entity_collection',
      'ding_entity_menu' => 'ting/collection/%ting_collection',
      'ding_entity_index' => 2,
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'ding_entity_id',
      ),
      'view modes' => array(),
      'bundles' => array(),
    ),
  );

  return $return;
}

/**
 * Callback for entity_uri(). Returns the uri for the object.
 */
function ting_object_uri($collection) {
  return array('path' => 'ting/object/' . $collection->id);
}

/**
 * Callback for entity_uri(). Returns the uri for the collection.
 */
function ting_collection_uri($collection) {
  return array('path' => 'ting/collection/' . $collection->id);
}

/**
 * Implements hook_registry_files_alter().
 */
function ting_registry_files_alter(&$files, $modules) {
  // Add in ting client classes, so the autoloader knows where to find
  // them. This is more handy than hardcoding them into the info file.
  $def = array(
    'module' => 'ting',
    'weight' => 0,
  );

  // Add all of the Ting client library to the registry.
  foreach (file_scan_directory(drupal_get_path('module', 'ting') . '/lib/ting-client/lib', '/\.php$/') as $filename => $dummy) {
    $files[$filename] = $def;
  }

  // And the Ting client unit tests as well.
  foreach (file_scan_directory(drupal_get_path('module', 'ting') . '/lib/ting-client/tests', '/\.test$/') as $filename => $dummy) {
    $files[$filename] = $def;
  }
}

/**
 * Load multiple ting objects.
 *
 * Don't use this, use ding_entity_load_multiple().
 */
function ting_object_load_multiple($ids) {
  return ding_entity_load_multiple($ids, 'ting_object');
}

/**
 * Sorts the objects according to type and language.
 *
 * But maintains the order of types and languages in the original array.
 */
function _ting_type_lang_sort($objects, &$return_types) {
  $types = array();
  $languages = array();
  $sorted = array();
  // Sort the objects into type buckets containing language buckets.
  foreach ($objects as $object) {
    // We're using keys so we don't have to uniq its afterwards.
    $types[$object->type] = TRUE;
    $languages[$object->language] = TRUE;
    $buckets[$object->type][$object->language][] = $object;
  }

  $return_types = array_keys($types);
  // Now flatten the buckets into a flat array.
  foreach ($return_types as $type) {
    foreach (array_keys($languages) as $language) {
      if (isset($buckets[$type][$language])) {
        $sorted = array_merge($sorted, $buckets[$type][$language]);
      }
    }
  }

  return $sorted;
}
